buildscript {
    repositories {
        maven { url = "https://repo.spongepowered.org/maven" }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'maven-publish'
    id 'idea'
    id 'net.darkhax.curseforgegradle' version '1.0.14'
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: "org.spongepowered.mixin"

group = mod_group
archivesBaseName = "${mod_id}-forge-${minecraft_version}"
version = mod_version

jarJar.enable()
build.dependsOn tasks.jarJar

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "Client"

            if (forge_mixins.toBoolean()) {
                arg "-mixin.config=${mod_id}.mixins.json"
            }

            property "mixin.env.disableRefMap", "true"
            property "mixin.debug.export", "true"
            property "mixin.debug.export.decompile", "false"
            property "mixin.debug.verbose", "true"
            property "mixin.debug.dumpTargetOnFailure", "true"
            property "mixin.checks", "true"
            property "mixin.hotSwap", "true"

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(":shared").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "Server"

            if (forge_mixins.toBoolean()) {
                arg "-mixin.config=${mod_id}.mixins.json"
            }

            property "mixin.env.disableRefMap", "true"
            property "mixin.debug.export", "true"
            property "mixin.debug.export.decompile", "false"
            property "mixin.debug.verbose", "true"
            property "mixin.debug.dumpTargetOnFailure", "true"
            property "mixin.checks", "true"
            property "mixin.hotSwap", "true"

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(":shared").sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "GameTest"

            if (forge_mixins.toBoolean()) {
                arg "-mixin.config=${mod_id}.mixins.json"
            }

            property "mixin.env.disableRefMap", "true"
            property "mixin.debug.export", "true"
            property "mixin.debug.export.decompile", "false"
            property "mixin.debug.verbose", "true"
            property "mixin.debug.dumpTargetOnFailure", "true"
            property "mixin.checks", "true"
            property "mixin.hotSwap", "true"

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(":shared").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "Data"

            property 'forge.logging.console.level', 'debug'

            if (forge_mixins.toBoolean()) {
                arg "-mixin.config=${mod_id}.mixins.json"
            }

            property "mixin.env.disableRefMap", "true"
            property "mixin.debug.export", "true"
            property "mixin.debug.export.decompile", "false"
            property "mixin.debug.verbose", "true"
            property "mixin.debug.dumpTargetOnFailure", "true"
            property "mixin.checks", "true"
            property "mixin.hotSwap", "true"

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(":shared").sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs 'src/generated/resources'
        }
        ext.refMap = "${mod_id}.refmap.json"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    compileOnly project(":shared")

    compileOnly "org.jetbrains:annotations:22.0.0"

    compileOnly fg.deobf("mezz.jei:jei-$jei_minecraft_version-common-api:$jei_version")
    if (jei_minecraft_version == minecraft_version) {
        runtimeOnly fg.deobf("mezz.jei:jei-$jei_minecraft_version-forge:$jei_version")
    }

    compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:$cloth_config_version")

    compileOnly fg.deobf("curse.maven:jade-324717:$jade_forge_version")
    compileOnly fg.deobf("mcp.mobius.waila:wthit-api:forge-$wthit_version")
    compileOnly fg.deobf("curse.maven:the-one-probe-245211:$theoneprobe_version")
}

apply from: 'dependencies.gradle'

tasks.withType(JavaCompile) {
    source(project(":shared").sourceSets.main.allSource)
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        forge_loader_version_range: forge_loader_version_range,
        mod_id: mod_id, mod_version: mod_version
]
processResources {
    from project(":shared").sourceSets.main.resources

    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_id}" }
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = mod_id + "-forge"
            version = project.version + (!project.version.endsWith("SNAPSHOT") ? "+" + minecraft_version : "")

            artifact jar
        }
    }

    repositories {
        maven {
            var releasesRepoUrl = "https://maven.twelveiterations.com/repository/maven-releases/"
            var snapshotsRepoUrl = "https://maven.twelveiterations.com/repository/maven-snapshots/"
            url = uri(version.toString().endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl)
            name = "twelveIterationsNexus"
            credentials(PasswordCredentials)
        }
    }
}

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn('build')
    description = 'Publishes the Forge build to CurseForge.'
    group = 'publishing'

    apiToken = project.findProperty("curseforge.api_key") ?: System.getenv("CURSEFORGE_TOKEN") ?: "none"

    def mainFile = upload(curseforge_forge_project_id, file("${project.buildDir}/libs/${archivesBaseName}-${version}-all.jar"))
    mainFile.changelog = rootProject.file('CHANGELOG.md').text
    project.minecraft_versions.split(',').toList().each { mainFile.addGameVersion(it) }
    mainFile.releaseType = "release"
}

modrinth {
    token = project.findProperty("modrinth.token") ?: System.getenv("MODRINTH_TOKEN") ?: "none"
    projectId = project.modrinth_forge_project_id
    versionType = project.modrinth_release_type
    versionNumber = project.version + "+forge-" + project.minecraft_version
    uploadFile = jar.outputs.getFiles().asPath.replace(".jar", "-all.jar")
    changelog = rootProject.file("CHANGELOG.md").text
    gameVersions = project.minecraft_versions.split(',').toList()
    syncBodyFrom = rootProject.file("modrinth.md").text
    loaders = ['forge']
}